import streamlit as st
import requests
import json
from io import BytesIO
from PIL import Image
import pandas as pd
import random
import os
import re
import urllib.parse
import base64
from datetime import datetime, timedelta, date, timezone
import streamlit.components.v1 as components
import gspread
import pandas as pd
from gspread_dataframe import get_as_dataframe, set_with_dataframe


# Constantes
NOME_PLANILHA = "ChoppsLeague"
# CAMINHO_CREDENCIAL = "./credenciais/credenciais.json"

EMAILS_ADMIN = ["matheusmoreirabr@hotmail.com", "admin@teste.com"]


st.set_page_config(page_title="Chopp's League", page_icon="üçª")


# -----------------------------------------
# Autentica√ß√£o
# -----------------------------------------
def autenticar_gsheets():
    # Pega credenciais JSON da secret e converte pra dict
    cred_json_str = st.secrets["gsheets_cred"]
    cred_json = json.loads(cred_json_str)

    scope = [
        "https://spreadsheets.google.com/feeds",
        "https://www.googleapis.com/auth/drive",
    ]

    creds = gspread.service_account_from_dict(cred_json, scopes=scope)
    return creds


# -----------------------------------------
# Inicializa√ß√£o: cria planilhas se n√£o existirem
# -----------------------------------------
def init_data_gsheets():
    gc = autenticar_gsheets()
    sh = gc.open(NOME_PLANILHA)
    existentes = [ws.title for ws in sh.worksheets()]

    if "Usuarios" not in existentes:
        df_usuarios = pd.DataFrame(
            columns=[
                "email",
                "nome",
                "posicao",
                "nascimento",
                "telefone",
                "senha",
                "palavra_chave",
                "dica_palavra_chave",
                "tipo",
            ]
        )
        sh.add_worksheet(title="Usuarios", rows="100", cols="20")
        set_with_dataframe(sh.worksheet("Usuarios"), df_usuarios)

    if "Partidas" not in existentes:
        df_partidas = pd.DataFrame(
            columns=[
                "Data da partida",
                "N¬∫ Partida",
                "Placar Borrusia",
                "Gols Borrusia",
                "Assist√™ncias Borrusia",
                "Placar Inter",
                "Gols Inter",
                "Assist√™ncias Inter",
            ]
        )
        sh.add_worksheet(title="Partidas", rows="100", cols="20")
        set_with_dataframe(sh.worksheet("Partidas"), df_partidas)

    if "Jogadores" not in existentes:
        df_jogadores = pd.DataFrame(
            columns=[
                "Nome",
                "Time",
                "Gols",
                "Assist√™ncias",
                "Faltas",
                "Cart√µes Amarelos",
                "Cart√µes Vermelhos",
            ]
        )
        sh.add_worksheet(title="Jogadores", rows="100", cols="20")
        set_with_dataframe(sh.worksheet("Jogadores"), df_jogadores)

    if "Presen√ßas" not in existentes:
        df_presencas = pd.DataFrame(
            columns=["Nome", "Posi√ß√£o", "Presen√ßa", "DataPartida", "Data"]
        )
        sh.add_worksheet(title="Presen√ßas", rows="100", cols="10")
        set_with_dataframe(sh.worksheet("Presen√ßas"), df_presencas)


# -----------------------------------------
# Carregar dados das planilhas
# -----------------------------------------
def load_data_gsheets():
    gc = autenticar_gsheets()
    sh = gc.open(NOME_PLANILHA)

    # Lista das abas obrigat√≥rias
    abas_necessarias = ["Partidas", "Jogadores", "Usuarios", "Presen√ßas"]
    abas_existentes = [w.title for w in sh.worksheets()]

    # Cria as abas que estiverem faltando
    for aba in abas_necessarias:
        if aba not in abas_existentes:
            sh.add_worksheet(title=aba, rows=1000, cols=20)

    # Carrega os dados das abas
    partidas = get_as_dataframe(sh.worksheet("Partidas")).dropna(how="all")
    jogadores = get_as_dataframe(sh.worksheet("Jogadores")).dropna(how="all")
    usuarios_df = get_as_dataframe(sh.worksheet("Usuarios")).dropna(how="all")
    presencas = get_as_dataframe(sh.worksheet("Presen√ßas")).dropna(how="all")

    # Converter para dicion√°rio com e-mail como chave
    usuarios = {}
    if not usuarios_df.empty and "email" in usuarios_df.columns:
        for _, row in usuarios_df.iterrows():
            if pd.notna(row["email"]):
                usuarios[row["email"]] = row.drop(labels="email").to_dict()

    return partidas, jogadores, usuarios


# -----------------------------------------
# Salvar dados nas planilhas
# -----------------------------------------
def save_data_gsheets(partidas, jogadores, usuarios, presencas):
    gc = autenticar_gsheets()
    sh = gc.open(NOME_PLANILHA)

    if isinstance(partidas, list):
        partidas = pd.DataFrame(partidas)
    if isinstance(jogadores, list):
        jogadores = pd.DataFrame(jogadores)
    if isinstance(presencas, list):
        presencas = pd.DataFrame(presencas)

    # Converter dicion√°rio de usu√°rios para DataFrame
    usuarios_df = (
        pd.DataFrame.from_dict(usuarios, orient="index")
        .reset_index()
        .rename(columns={"index": "email"})
    )

    set_with_dataframe(sh.worksheet("Partidas"), partidas)
    set_with_dataframe(sh.worksheet("Jogadores"), jogadores)
    set_with_dataframe(sh.worksheet("Usuarios"), usuarios_df)
    set_with_dataframe(sh.worksheet("Presen√ßas"), presencas)


# -----------------------------------------
# Abstra√ß√µes para carregar/salvar
# -----------------------------------------
def load_data():
    return load_data_gsheets()


def save_data(partidas, jogadores, usuarios):
    save_data_gsheets(partidas, jogadores, usuarios)


# Sess√µes iniciais
if "usuario_logado" not in st.session_state:
    st.session_state.usuario_logado = False
if "usuarios" not in st.session_state:
    st.session_state.usuarios = {}
if "pagina_atual" not in st.session_state:
    st.session_state.pagina_atual = "login"
if "recuperacao_email" not in st.session_state:
    st.session_state.recuperacao_email = ""
if "codigo_recuperacao" not in st.session_state:
    st.session_state.codigo_recuperacao = ""
if "codigo_enviado" not in st.session_state:
    st.session_state.codigo_enviado = False
if "modo_recuperacao" not in st.session_state:
    st.session_state.modo_recuperacao = False
if "mostrar_senha_login" not in st.session_state:
    st.session_state.mostrar_senha_login = False

# Fun√ß√µes auxiliares


def email_valido(email):
    return re.match(r"[^@]+@[^@]+\.[^@]+", email)


def formatar_telefone(numero):
    numeros = re.sub(r"\D", "", numero)
    if len(numeros) == 11:
        return f"({numeros[:2]}) {numeros[2:7]}-{numeros[7:]}"
    return numero

    # --- TELA DE LOGIN / CADASTRO ---


def tela_login():

    st.markdown(
        "<h1 style='font-size: 1.6rem;'>üîê Login / Cadastro</h1>",
        unsafe_allow_html=True,
    )
    aba = st.radio(
        "Escolha uma op√ß√£o:", ["Login", "Cadastro"], key="aba_login", horizontal=True
    )

    _, _, usuarios = load_data()  # ‚Üê l√™ os usu√°rios direto da planilha

    # LOGIN
    if aba == "Login":
        if not st.session_state.modo_recuperacao:
            with st.form("form_login"):
                email = st.text_input("E-mail", key="login_email")
                senha = st.text_input("Senha", type="password", key="login_senha")
                st.markdown(
                    "<div style='margin-top: 2rem;'></div>", unsafe_allow_html=True
                )
                submit = st.form_submit_button("Entrar")

            if submit:
                if email in usuarios and usuarios[email]["senha"] == senha:
                    st.session_state.usuario_logado = True
                    st.session_state.nome = usuarios[email]["nome"]
                    st.session_state.tipo_usuario = usuarios[email].get(
                        "tipo", "usuario"
                    )
                    st.session_state.email = email
                    st.session_state.pagina_atual = "üè† Tela Principal"
                    st.rerun()
                else:
                    st.error("E-mail ou senha inv√°lidos.")

        if not st.session_state.modo_recuperacao:
            if st.button("Esqueci minha senha"):
                st.session_state.modo_recuperacao = True
                st.rerun()

        if st.session_state.modo_recuperacao:
            st.markdown(
                "<h3 style='margin-top: 1rem;'>üîÅ Atualize sua senha</h3>",
                unsafe_allow_html=True,
            )
            email = st.text_input("E-mail cadastrado", key="rec_email_final")

            if email in usuarios and usuarios[email].get("dica_palavra_chave"):
                st.info(f"üí° Dica: {usuarios[email]['dica_palavra_chave']}")

            with st.form("form_esqueci"):
                palavra_chave_rec = st.text_input(
                    "Palavra-chave", key="palavra_chave_rec_final"
                )
                nova_senha = st.text_input(
                    "Nova senha", type="password", key="nova_senha_final"
                )
                confirmar_nova_senha = st.text_input(
                    "Confirme a nova senha",
                    type="password",
                    key="conf_nova_senha_final",
                )
                confirmar = st.form_submit_button("Atualizar senha")

                if confirmar:
                    if email not in usuarios:
                        st.error("E-mail n√£o encontrado.")
                    elif palavra_chave_rec != usuarios[email]["palavra_chave"]:
                        st.error("Palavra-chave incorreta.")
                    elif nova_senha != confirmar_nova_senha:
                        st.error("As novas senhas n√£o coincidem.")
                    else:
                        usuarios[email]["senha"] = nova_senha
                        partidas, jogadores, _ = load_data()
                        save_data(partidas, jogadores, usuarios)
                        st.success("Senha atualizada com sucesso! Agora fa√ßa login.")
                        st.session_state.modo_recuperacao = False
                        st.rerun()

    # CADASTRO
    elif aba == "Cadastro":
        with st.form("form_cadastro"):
            nome = st.text_input(
                "Nome completo",
                key="cad_nome",
                placeholder="Digite seu nome completo",
                autocomplete="name",
            )
            posicao = st.selectbox(
                "Posi√ß√£o que joga", ["Linha", "Goleiro"], key="cad_pos"
            )
            raw_nascimento = st.text_input(
                "Data de nascimento (DD/MM/AAAA)",
                key="cad_nasc",
                placeholder="ddmmaaaa",
                autocomplete="bday",
            )
            nascimento = re.sub(r"\D", "", raw_nascimento)
            if len(nascimento) >= 5:
                nascimento = (
                    nascimento[:2]
                    + "/"
                    + nascimento[2:4]
                    + ("/" + nascimento[4:8] if len(nascimento) > 4 else "")
                )
            telefone = st.text_input(
                "WhatsApp - Ex: 3199475512",
                key="cad_tel",
                placeholder="(DDD) n√∫mero",
                autocomplete="tel",
            )
            email = st.text_input("E-mail", key="cad_email", autocomplete="email")
            senha = st.text_input("Senha", type="password", key="cad_senha")
            confirmar_senha = st.text_input(
                "Confirme a senha", type="password", key="cad_conf_senha"
            )
            palavra_chave = st.text_input(
                "Palavra-chave (para recuperar a senha)",
                key="cad_palavra",
                help="Use algo que voc√™ consiga lembrar. Ser√° necess√°ria para redefinir sua senha no futuro.",
            )
            dica_palavra_chave = st.text_input(
                "Dica da palavra-chave",
                key="cad_dica",
                help="Ser√° exibida para te ajudar a lembrar da palavra-chave, se necess√°rio.",
            )
            submit = st.form_submit_button("Cadastrar")

            erros = []

            if submit:
                if (
                    not nome
                    or not posicao
                    or not nascimento
                    or not telefone
                    or not email
                    or not senha
                    or not confirmar_senha
                    or not palavra_chave
                    or not dica_palavra_chave
                ):
                    erros.append("‚ö† Todos os campos devem ser preenchidos.")
                if not re.match(r"^\d{2}/\d{2}/\d{4}$", nascimento):
                    erros.append(
                        "üìÖ O campo 'Data de nascimento' deve estar no formato DD/MM/AAAA."
                    )
                if not telefone.isdigit():
                    erros.append("üìû O campo 'WhatsApp' deve conter apenas n√∫meros.")
                if not email_valido(email):
                    erros.append(
                        "‚úâ O campo 'E-mail' deve conter um endere√ßo v√°lido (ex: nome@exemplo.com)."
                    )
                if senha != confirmar_senha:
                    erros.append("üîê As senhas n√£o coincidem.")

                if erros:
                    for erro in erros:
                        st.warning(erro)
                    submit = False

            if submit:
                if email in usuarios:
                    st.warning("Este e-mail j√° est√° cadastrado.")
                elif len(re.sub(r"\D", "", telefone)) != 11:
                    st.warning("Telefone deve conter 11 d√≠gitos.")
                else:
                    usuarios[email] = {
                        "nome": nome,
                        "posicao": posicao,
                        "nascimento": str(nascimento),
                        "telefone": formatar_telefone(telefone),
                        "senha": senha,
                        "palavra_chave": palavra_chave,
                        "dica_palavra_chave": dica_palavra_chave,
                        "tipo": "admin" if email in EMAILS_ADMIN else "usuario",
                    }

                    partidas, jogadores, _ = load_data()
                    save_data(partidas, jogadores, usuarios)

                    st.success("Cadastro realizado! Agora¬†fa√ßa¬†login.")


# BLOQUEIA TUDO SE N√ÉO ESTIVER LOGADO
if not st.session_state.usuario_logado:
    tela_login()
else:

    if "tipo_usuario" not in st.session_state:
        st.session_state.tipo_usuario = "usuario"

    if "presencas_confirmadas" not in st.session_state:
        st.session_state.presencas_confirmadas = {}

    # --- SIDEBAR --- (imagem e nome apenas)
    with st.sidebar:
        st.image("./imagens/logo.png", use_container_width=True)
        st.markdown("<br>", unsafe_allow_html=True)
        st.markdown(f"üë§ Jogador: **{st.session_state.nome}**")

        st.markdown("---")

    if st.session_state.tipo_usuario == "admin":
        opcoes = [
            "üè† Tela Principal",
            "üìä Registrar Partida",
            "üëü Estat√≠sticas dos Jogadores",
            "üé≤ Sorteio de Times",
            "‚úÖ Confirmar Presen√ßa/Aus√™ncia",
            "üèÖ Avalia√ß√£o P√≥s-Jogo",
            "üì∏ Galeria de Momentos",
            "üí¨ F√≥rum",
            "üì£ Comunicado √† Gest√£o",
            "üìú Regras Chopp's League"
        ]
    else:
        opcoes = [
            "üè† Tela Principal",
            "üëü Estat√≠sticas dos Jogadores",
            "‚úÖ Confirmar Presen√ßa/Aus√™ncia",
            "üèÖ Avalia√ß√£o P√≥s-Jogo",
            "üì∏ Galeria de Momentos",
            "üí¨ F√≥rum",
            "üì£ Comunicado √† Gest√£o",
            "üìú Regras Chopp's League"
        ]

    pagina_escolhida = st.selectbox(
        "",  # label obrigat√≥ria
        opcoes,
        index=opcoes.index(st.session_state.pagina_atual),
        key="menu_topo",
    )

    if pagina_escolhida != st.session_state.pagina_atual:
        st.session_state.pagina_atual = pagina_escolhida
        st.rerun()

    # --- Confirma√ß√£o de logout ---
    # Inicializa controle de logout apenas uma vez
    if "confirmar_logout" not in st.session_state:
        st.session_state.confirmar_logout = False

    # FLAGS de a√ß√£o
    logout_clicado = False
    cancelar_clicado = False
    confirmar_clicado = False


    with st.sidebar:
        if st.button("üë§ Meu Perfil"):
            st.session_state.pagina_atual = "üë§ Meu Perfil"
            st.rerun()

    # SIDEBAR - bot√£o logout
    with st.sidebar:
        if not st.session_state.confirmar_logout:
            col1, col2, col3 = st.columns([1, 2, 1])
            with col2:
                if st.button("üö™ Logout", key="botao_logout"):
                    st.session_state.confirmar_logout = True
                    logout_clicado = True
        else:
            st.warning("Tem certeza que deseja sair?")
            col1, col2 = st.columns(2)
            with col1:
                if st.button(
                    "‚ùå Cancelar", key="cancelar_logout", use_container_width=True
                ):
                    st.session_state.confirmar_logout = False
                    cancelar_clicado = True
            with col2:
                if st.button(
                    "‚úÖ Confirmar", key="confirmar_logout_btn", use_container_width=True
                ):
                    usuarios = st.session_state.get("usuarios", {})
                    st.session_state.clear()
                    st.session_state.usuario_logado = False
                    st.session_state.usuarios = usuarios
                    st.session_state.pagina_atual = "login"
                    confirmar_clicado = True

    # Essas chamadas precisam estar fora do `with`
    if logout_clicado or cancelar_clicado or confirmar_clicado:
        st.rerun()

    # --- ROTEADOR ---
    def tela_principal():
        pass

    def registrar_partidas(p):
        return p

    def tela_jogadores(j):
        return j

    def tela_sorteio():
        pass

    def tela_presenca_login():
        pass

    def tela_avaliacao_pos_jogo():
        pass

    def tela_galeria_momentos():
        pass

    def tela_forum():
        pass

    def tela_comunicado():
        pass

    def tela_regras():
        pass

    partidas = st.session_state.get("partidas", [])
    jogadores = st.session_state.get("jogadores", [])

    pag = st.session_state.pagina_atual

    # Exibe as p√°ginas conforme tipo
    if pag == "üè† Tela Principal":
        tela_principal()
    elif pag == "üìä Registrar Partida" and st.session_state.tipo_usuario == "admin":
        partidas = registrar_partidas(partidas)
    elif pag == "üëü Estat√≠sticas dos Jogadores":
        jogadores = tela_jogadores(jogadores)
    elif pag == "üé≤ Sorteio de Times" and st.session_state.tipo_usuario == "admin":
        tela_sorteio()
    elif pag == "‚úÖ Confirmar Presen√ßa/Aus√™ncia":
        tela_presenca_login()
    elif pag == "üèÖ Avalia√ß√£o P√≥s-Jogo":
        tela_avaliacao_pos_jogo()
    elif pag == "üì∏ Galeria de Momentos":
        tela_galeria_momentos()
    elif pag == "üí¨ F√≥rum":
        tela_forum()
    elif pag == "üì£ Comunicado √† Gest√£o":
        tela_comunicado()
    elif pag == "üìú Regras Chopp's League":
        tela_regras()
    elif pag == "üë§ Meu Perfil":
        usuario = st.session_state.usuarios.get(st.session_state.email, {})
        st.markdown("## üë§ Meu Perfil")

        st.markdown("### üìã Informa√ß√µes Cadastrais")
        nome = usuario.get("nome", "")
        posicao = usuario.get("posicao", "")
        nascimento = usuario.get("nascimento", "")

        st.markdown(f"- **Nome:** {nome}")
        st.markdown(f"- **Posi√ß√£o:** {posicao}")
        st.markdown(f"- **Data de Nascimento:** {nascimento}")

        telefone = st.text_input("üì± Telefone", value=usuario.get("telefone", ""))
        email = st.text_input("‚úâÔ∏è E-mail", value=st.session_state.email)

        st.markdown("---")
        st.markdown("### üîê Atualizar Senha")

        senha_atual = st.text_input("Senha atual", type="password")
        nova_senha = st.text_input("Nova senha", type="password")
        conf_nova_senha = st.text_input("Confirmar nova senha", type="password")
        nova_palavra_chave = st.text_input("Nova palavra-chave (recupera√ß√£o)")
        nova_dica = st.text_input("Nova dica da palavra-chave")

        if st.button("üíæ Salvar altera√ß√µes"):
            usuarios = st.session_state.usuarios
            email_antigo = st.session_state.email

            if senha_atual != usuarios[email_antigo]["senha"]:
                st.error("‚ùå Senha atual incorreta.")
            elif nova_senha != conf_nova_senha:
                st.error("‚ùå As novas senhas n√£o coincidem.")
            elif not nova_palavra_chave or not nova_dica:
                st.error("‚ùå A palavra-chave e a dica devem ser preenchidas.")
            else:
                usuarios[email_antigo]["telefone"] = telefone
                usuarios[email_antigo]["senha"] = nova_senha
                usuarios[email_antigo]["palavra_chave"] = nova_palavra_chave
                usuarios[email_antigo]["dica_palavra_chave"] = nova_dica

                if email != email_antigo:
                    usuarios[email] = usuarios.pop(email_antigo)
                    st.session_state.email = email

                partidas, jogadores, _ = load_data()
                save_data(partidas, jogadores, usuarios)
                st.success("‚úÖ Informa√ß√µes atualizadas com sucesso!")
    elif pag == "üö™ Sair":
        for k in list(st.session_state.keys()):
            del st.session_state[k]
        st.rerun()

    # M√∫sica ambiente (apenas se logado)
    if st.session_state.usuario_logado:

        def tocar_musica_sidebar():
            caminho_musica = "audio/musica.mp3"
            if os.path.exists(caminho_musica):
                with open(caminho_musica, "rb") as f:
                    audio_bytes = f.read()
                audio_base64 = base64.b64encode(audio_bytes).decode()
                st.sidebar.markdown(
                    f"""
                    <p style='text-align: center; font-weight: bold;'>üéµ M√∫sica Ambiente</p>
                    <audio controls style="width: 100%;">
                        <source src="data:audio/mp3;base64,{audio_base64}" type="audio/mp3">
                        Seu navegador n√£o suporta √°udio.
                    </audio>
                """,
                    unsafe_allow_html=True,
                )
            else:
                st.sidebar.warning("üîá M√∫sica n√£o encontrada.")

        tocar_musica_sidebar()

    # Arquivos CSV
    FILE_PARTIDAS = "partidas.csv"
    FILE_JOGADORES = "jogadores.csv"

    def init_data():
        if not os.path.exists(FILE_PARTIDAS):
            df = pd.DataFrame(
                columns=[
                    "Data",
                    "N√∫mero da Partida",
                    "Placar Borussia",
                    "Gols Borussia",
                    "Assist√™ncias Borussia",
                    "Placar Inter",
                    "Gols Inter",
                    "Assist√™ncias Inter",
                ]
            )
            df.to_csv(FILE_PARTIDAS, index=False)

        if not os.path.exists(FILE_JOGADORES):
            df = pd.DataFrame(
                columns=[
                    "Nome",
                    "Time",
                    "Gols",
                    "Assist√™ncias",
                    "Faltas",
                    "Cart√µes Amarelos",
                    "Cart√µes Vermelhos",
                ]
            )
            df.to_csv(FILE_JOGADORES, index=False)

    def load_data():
        partidas = pd.read_csv(FILE_PARTIDAS)
        jogadores = pd.read_csv(FILE_JOGADORES)
        return partidas, jogadores

    def save_data(partidas, jogadores):
        partidas.to_csv(FILE_PARTIDAS, index=False)
        jogadores.to_csv(FILE_JOGADORES, index=False)

    # Carrega dados com seguran√ßa
    def load_data_safe():
        try:
            partidas = pd.read_csv(FILE_PARTIDAS)
        except:
            partidas = pd.DataFrame(
                columns=[
                    "Data",
                    "N√∫mero da Partida",
                    "Placar Borussia",
                    "Gols Borussia",
                    "Assist√™ncias Borussia",
                    "Placar Inter",
                    "Gols Inter",
                    "Assist√™ncias Inter",
                ]
            )
        try:
            jogadores = pd.read_csv(FILE_JOGADORES)
        except:
            jogadores = pd.DataFrame(
                columns=[
                    "Nome",
                    "Time",
                    "Gols",
                    "Assist√™ncias",
                    "Faltas",
                    "Cart√µes Amarelos",
                    "Cart√µes Vermelhos",
                ]
            )
        return partidas, jogadores

    partidas, jogadores = load_data_safe()

    # Tela Principal
    def imagem_base64(path, legenda):
        if os.path.exists(path):
            img = Image.open(path)
            img = img.resize((200, 200))
            buffer = BytesIO()
            img.save(buffer, format="PNG")
            img_base64 = base64.b64encode(buffer.getvalue()).decode()
            return f"""
                <div style="text-align: center; min-width: 20px;">
                    <img src="data:image/png;base64,{img_base64}" width="80">
                    <p style="margin-top: 0.5rem; font-weight: bold;">{legenda}</p>
                </div>
            """
        return f"<div style='text-align: center;'>Imagem n√£o encontrada: {path}</div>"

    # ‚úÖ Tela principal com os escudos lado a lado e "X" no meio
    def tela_principal(partidas, jogadores):
        st.markdown(
            "<h5 style='text-align: center; font-weight: bold;'>Bem-vindo √† Chopp's League! üçª</h5>",
            unsafe_allow_html=True,
        )
        st.markdown("---")

        borussia_gols = 18
        borussia_vitorias = 17
        inter_gols = 21
        inter_vitorias = 19
        empates = 12

        # Caminhos das imagens na pasta 'imagens'
        escudo_borussia = imagem_base64("imagens/escudo_borussia.png", "Borussia")
        escudo_inter = imagem_base64("imagens/escudo_inter.png", "Inter")

        # Container com as imagens e o "X"
        st.markdown(
            f"""
                <div style="
                    display: flex;
                    justify-content: center;
                    align-items: center;
                    gap: 50px;
                    flex-wrap: nowrap;
                ">
                    {escudo_borussia}
                <div style="font-size: 60px; font-weight: bold; line-height: 1;">‚öîÔ∏è
                </div>
                    {escudo_inter}
                </div>
            """,
            unsafe_allow_html=True,
        )

        st.markdown(
            f"""
            <div style="
                display: flex;
                justify-content: space-between;
                align-items: center;
                gap: 50px;
                margin-top: 20px;
                flex-wrap: wrap;
            ">
            <div style="text-align: center; min-width: 80px;">
                <p style="font-size: 30px;">
                    üèÜ - {borussia_vitorias}<br>
                    ‚öΩ - {borussia_gols}
                </p>
            </div>

            <div style="text-align: center; min-width: 80px;">
                <p style="font-size: 30px;">
                    ü§ù - {empates}
                </p>
            </div>

            <div style="text-align: center; min-width: 80px;">
                <p style="font-size: 30px;">
                    üèÜ - {inter_vitorias}<br>
                    ‚öΩ - {inter_gols}
                </p>
            </div>
        """,
            unsafe_allow_html=True,
        )

        st.markdown("---")

        # Mostrar presen√ßa e aus√™ncia de todos os jogadores (lista simples)
        presencas = st.session_state.get("presencas_confirmadas", {})
        todos_nomes = [dados["nome"] for dados in st.session_state.usuarios.values()]

        linhas_html = ""
        confirmados = 0

        for nome in sorted(todos_nomes):
            status = "‚ùì"
            for email, dados in presencas.items():
                if dados["nome"] == nome:
                    if dados.get("presenca") == "sim":
                        status = "‚úÖ"
                        confirmados += 1
                    elif dados.get("presenca") == "nao":
                        status = "‚ùå"
                    break
            linhas_html += f"<li>{status} {nome}</li>"

        st.markdown(
            f"""
            <div style="text-align: center; margin-top: 2rem;">
                <h6 style="text-align: center;">üìã Presen√ßa da Semana ‚Äî Confirmados: {confirmados}</h6>
                <ul style="list-style-type: none; padding: 0; font-size: 1rem; line-height: 1.6;">
                    {linhas_html}
                </ul>
            </div>
        """,
            unsafe_allow_html=True,
        )

    # Tela de registro das partidas
    def registrar_partidas(partidas):
        st.title("Registrar Estat√≠sticas da Partida")

        jogadores_originais = st.session_state.get(
            "jogadores_presentes",
            [
                "Matheus Moreira",
                "Jos√© Moreira",
                "Lucas",
                "Alex",
                "Gustavo",
                "Lula",
                "Juninho",
                "Jesus",
                "Gabriel",
                "Arthur",
            ],
        )

        numero_partida = len(partidas) + 1
        data = st.date_input("Data da partida")
        st.markdown(f"**N√∫mero da Partida:** {numero_partida}")

        # Escudos
        col_a, col_b, col_c = st.columns([3, 1, 3])

        with col_a:
            st.markdown("<div style='text-align:center;'>", unsafe_allow_html=True)
            if os.path.exists("./imagens/escudo_borussia.png"):
                st.image("./imagens/escudo_borussia.png", use_container_width=True)
            else:
                st.warning("Imagem do Borussia n√£o encontrada.")
            st.markdown("</div>", unsafe_allow_html=True)

        with col_b:
            st.markdown(
                "<div style='text-align:center; margin-top: 50px; font-size: 48px;'>‚úñ</div>",
                unsafe_allow_html=True,
            )

        with col_c:
            st.markdown("<div style='text-align:center;'>", unsafe_allow_html=True)
            if os.path.exists("./imagens/escudo_inter.png"):
                st.image("./imagens/escudo_inter.png", use_container_width=True)
            else:
                st.warning("Imagem da Inter n√£o encontrada.")
            st.markdown("</div>", unsafe_allow_html=True)

        # Se√ß√µes de input
        col1, col2 = st.columns(2)

        with col1:
            lista_borussia = ["Ningu√©m marcou"] + jogadores_originais * 2
            gols_borussia = st.multiselect(
                "Goleadores (Borussia)", lista_borussia, key="gols_borussia"
            )
            placar_borussia = (
                0 if "Ningu√©m marcou" in gols_borussia else len(gols_borussia)
            )
            st.markdown(
                f"<div style='text-align:center; font-size: 28px; font-weight:bold;'>{placar_borussia} gol(s)</div>",
                unsafe_allow_html=True,
            )

            if "Ningu√©m marcou" in gols_borussia and len(gols_borussia) > 1:
                st.warning(
                    "Voc√™ n√£o pode selecionar jogadores junto com 'Ningu√©m marcou'"
                )
                gols_borussia = ["Ningu√©m marcou"]
                st.session_state["gols_borussia"] = ["Ningu√©m marcou"]

            assist_borussia = []
            if placar_borussia > 0 and "Ningu√©m marcou" not in gols_borussia:
                max_assists = 2 if placar_borussia > 1 else 1
                assist_borussia = st.multiselect(
                    f"Gar√ßons Borussia (m√°x {max_assists})",
                    [j for j in jogadores_originais if j not in gols_borussia],
                    max_selections=max_assists,
                    key="assist_borussia",
                )

        with col2:
            jogadores_indisponiveis = set(gols_borussia + assist_borussia)
            lista_inter = ["Ningu√©m marcou"] + [
                j for j in jogadores_originais if j not in jogadores_indisponiveis
            ] * 2
            gols_inter = st.multiselect(
                "Goleadores (Inter)", lista_inter, key="gols_inter"
            )
            placar_inter = 0 if "Ningu√©m marcou" in gols_inter else len(gols_inter)
            st.markdown(
                f"<div style='text-align:center; font-size: 28px; font-weight:bold;'>{placar_inter} gol(s)</div>",
                unsafe_allow_html=True,
            )

            if "Ningu√©m marcou" in gols_inter and len(gols_inter) > 1:
                st.warning(
                    "Voc√™ n√£o pode selecionar jogadores junto com 'Ningu√©m marcou'"
                )
                gols_inter = ["Ningu√©m marcou"]
                st.session_state["gols_inter"] = ["Ningu√©m marcou"]

            assist_inter = []
            if placar_inter > 0 and "Ningu√©m marcou" not in gols_inter:
                max_assists = 2 if placar_inter > 1 else 1
                assist_inter = st.multiselect(
                    f"Gar√ßons Inter (m√°x {max_assists})",
                    [j for j in jogadores_originais if j not in gols_inter],
                    max_selections=max_assists,
                    key="assist_inter",
                )

        # Registro final
        if st.button("Registrar"):
            nova = {
                "Data": data,
                "N√∫mero da Partida": numero_partida,
                "Placar Borussia": placar_borussia,
                "Gols Borussia": ", ".join(gols_borussia),
                "Assist√™ncias Borussia": ", ".join(assist_borussia),
                "Placar Inter": placar_inter,
                "Gols Inter": ", ".join(gols_inter),
                "Assist√™ncias Inter": ", ".join(assist_inter),
            }
            partidas = pd.concat([partidas, pd.DataFrame([nova])], ignore_index=True)
            partidas.to_csv("partidas.csv", index=False)
            st.success("‚úÖ Partida registrada com sucesso!")

        st.markdown("---")
        st.subheader("üìã Hist√≥rico de Partidas Registradas:")
        st.dataframe(partidas)

        return partidas

    # Estatisticas dos jogadores
    def tela_jogadores(jogadores):
        st.title("Estat√≠sticas dos Jogadores")
        st.markdown("‚ö†Ô∏è Em breve...")

    # Tela de sorteio
    def tela_sorteio():
        st.title("üé≤ Sorteio de Times")
        st.markdown("‚ö†Ô∏è Em breve...")

    # Tela de confirma√ß√£o de presen√ßa/aus√™ncia
    def tela_presenca_login():

        st.markdown("<br>", unsafe_allow_html=True)
        nome = st.session_state.get("nome", "usu√°rio")
        usuarios = st.session_state.get("usuarios", {})
        email = st.session_state.get("email", "")

        posicao = usuarios.get(email, {}).get("posicao", "Linha")

        agora = datetime.now()
        hoje = agora.weekday()  # segunda = 0 ... domingo = 6
        dias_para_quinta = (3 - hoje) % 7
        proxima_quinta = agora + timedelta(days=dias_para_quinta)
        horario_partida = proxima_quinta.replace(
            hour=20, minute=0, second=0, microsecond=0
        )
        data_formatada = horario_partida.strftime("%d/%m/%Y")
        data_display = horario_partida.strftime("%d/%m/%Y √†s %Hh")

        st.markdown(
            f"<p style='font-size:18px; font-weight:bold; text-align:center;'>üìÖ Pr√≥xima partida: {data_display}</p>",
            unsafe_allow_html=True,
        )

        dias_para_quarta = (2 - hoje) % 7
        proxima_quarta = agora + timedelta(days=dias_para_quarta)
        prazo_limite = proxima_quarta.replace(
            hour=22, minute=0, second=0, microsecond=0
        )

        passou_do_prazo = agora > prazo_limite
        resposta_enviada = "presenca_confirmada" in st.session_state

        if passou_do_prazo:
            st.warning(
                "‚ö†Ô∏è O prazo para confirmar presen√ßa ou aus√™ncia √© toda **quarta-feira at√© √†s 22h**."
            )
            if resposta_enviada:
                status = st.session_state["presenca_confirmada"]
                if status == "sim":
                    st.info(f"{nome}, voc√™ **confirmou presen√ßa** para esta semana. ‚úÖ")
                else:
                    motivo = st.session_state.get("motivo", "n√£o informado")
                    st.info(
                        f"{nome}, voc√™ **informou aus√™ncia** com o motivo: **{motivo}** ‚ùå"
                    )
            else:
                st.info("Voc√™ n√£o informou sua presen√ßa ou aus√™ncia esta semana.")
            return

        if resposta_enviada:
            if st.session_state["presenca_confirmada"] == "sim":
                st.success(f"{nome}, sua **presen√ßa** foi confirmada com sucesso! ‚úÖ")
            else:
                motivo = st.session_state.get("motivo", "n√£o informado")
                st.success(
                    f"{nome}, sua **aus√™ncia** foi registrada com o motivo: **{motivo}** ‚ùå"
                )

            if st.button("üîÅ Mudar de ideia"):
                for key in ["presenca_confirmada", "motivo"]:
                    if key in st.session_state:
                        del st.session_state[key]
                st.rerun()
            return

        presenca = st.radio(
            "Voc√™ vai comparecer?", ["‚úÖ Sim", "‚ùå N√£o"], horizontal=True
        )
        motivo = ""
        motivo_outros = ""

        if presenca == "‚ùå N√£o":
            motivo = st.selectbox(
                "Qual o motivo da aus√™ncia?",
                [
                    "Sa√∫de",
                    "Trabalho",
                    "Compromisso acad√™mico",
                    "Viagem",
                    "Problemas pessoais",
                    "Les√£o",
                    "Outros",
                ],
            )
            if motivo == "Outros":
                motivo_outros = st.text_area("Descreva o motivo")

        if st.button("Enviar resposta"):
            if (
                presenca == "‚ùå N√£o"
                and motivo == "Outros"
                and not motivo_outros.strip()
            ):
                st.warning("Descreva o motivo da aus√™ncia.")
            else:
                email = st.session_state.get("email")
                nome = st.session_state.get("nome", "Jogador")
                posicao = usuarios.get(email, {}).get("posicao", "Linha")
                fuso_utc_minus_3 = timezone(timedelta(hours=-3))
                data_envio = datetime.now(fuso_utc_minus_3).strftime(
                    "%d/%m/%Y %H:%M:%S"
                )
                data_partida = horario_partida.strftime("%d/%m/%Y")

                justificativa = (
                    motivo_outros.strip()
                    if (presenca == "‚ùå N√£o" and motivo == "Outros")
                    else (motivo if presenca == "‚ùå N√£o" else "")
                )

                nova_linha = {
                    "Nome": nome,
                    "Posi√ß√£o": posicao,
                    "Presen√ßa": "Sim" if presenca == "‚úÖ Sim" else "N√£o",
                    "DataPartida": data_partida,
                    "Data": data_envio,
                    "Motivo": justificativa,
                }

                # Carrega planilha e adiciona linha
                gc = autenticar_gsheets()
                sh = gc.open(NOME_PLANILHA)
                aba_presencas = sh.worksheet("Presen√ßas")
                df_presencas = get_as_dataframe(aba_presencas).dropna(how="all")
                df_presencas = pd.concat(
                    [df_presencas, pd.DataFrame([nova_linha])], ignore_index=True
                )
                set_with_dataframe(aba_presencas, df_presencas)

                st.session_state["presenca_confirmada"] = (
                    "sim" if presenca == "‚úÖ Sim" else "nao"
                )
                if presenca == "‚ùå N√£o":
                    st.session_state["motivo"] = justificativa

                st.success("‚úÖ Presen√ßa registrada com sucesso!")
                st.rerun()

    # Tela da avalia√ß√£o p√≥s-jogo
    def tela_avaliacao_pos_jogo():
        FILE_VOTOS = "votacao.csv"

        if not os.path.exists(FILE_VOTOS):
            df_votos = pd.DataFrame(columns=["Votante", "Craque", "Pereba", "Goleiro"])
            df_votos.to_csv(FILE_VOTOS, index=False)

        df_votos = pd.read_csv(FILE_VOTOS)

        if "Goleiro" not in df_votos.columns:
            df_votos["Goleiro"] = ""

        jogadores_presentes = st.session_state.get("jogadores_presentes", [])
        usuarios = st.session_state.get("usuarios", {})

        # Separar jogadores por posi√ß√£o
        goleiros = []
        linha = []
        for j in jogadores_presentes:
            for email, info in usuarios.items():
                if info["nome"] == j:
                    if info.get("posicao", "Linha") == "Goleiro":
                        goleiros.append(j)
                    else:
                        linha.append(j)

        st.markdown(
            "<h5 style='font-weight: bold;'>üòé T√° na hora do veredito!</h5>",
            unsafe_allow_html=True,
        )
        st.markdown(
            "Vote no **craque**, **pereba** e **melhor goleiro** da rodada üèÜü•¥üß§"
        )

        votante = st.session_state.get("nome", "usu√°rio")
        linha = [j for j in linha if j != votante]
        goleiros = [g for g in goleiros if g != votante]
        ja_votou = votante in df_votos["Votante"].values

        if not ja_votou:
            with st.form("votacao_form"):
                craque = st.selectbox(
                    "‚≠ê Craque da rodada", linha, placeholder="Selecione"
                )
                pereba_opcoes = [j for j in linha if j != craque]
                pereba = st.selectbox(
                    "ü•¥ Pereba da rodada", pereba_opcoes, placeholder="Selecione"
                )
                goleiro = st.selectbox(
                    "üß§ Melhor goleiro", goleiros, placeholder="Selecione"
                )
                submit = st.form_submit_button("Votar")

                if submit:
                    if craque == pereba:
                        st.error("O craque e o pereba devem ser jogadores diferentes.")
                    elif goleiro == "":
                        st.error("Escolha um goleiro.")
                    else:
                        novo_voto = pd.DataFrame(
                            [
                                {
                                    "Votante": votante,
                                    "Craque": craque,
                                    "Pereba": pereba,
                                    "Goleiro": goleiro,
                                }
                            ]
                        )
                        df_votos = pd.concat([df_votos, novo_voto], ignore_index=True)
                        df_votos.to_csv(FILE_VOTOS, index=False)
                        st.success("‚úÖ Voto registrado com sucesso!")
                        ja_votou = True

        if ja_votou and not df_votos.empty:

            def gerar_html_podio(serie, titulo, icone):
                df = serie.value_counts().reset_index()
                df.columns = ["Jogador", "Votos"]
                podium_colors = ["#FFD700", "#C0C0C0", "#CD7F32"]
                podium_labels = ["ü•á", "ü•à", "ü•â"]

                podium_html = f"<h3 style='margin-bottom: 20px;'>{icone} {titulo}</h3>"
                podium_html += "<div style='display: flex; justify-content: center; align-items: end; gap: 40px;'>"

                top_votos = df["Votos"].unique()[:3]

                for i, votos in enumerate(top_votos):
                    jogadores_empate = df[df["Votos"] == votos]["Jogador"].tolist()
                    nomes = "<br>".join(jogadores_empate)
                    podium_html += (
                        "<div style='text-align: center;'>"
                        f"<div style='"
                        f"background-color: {podium_colors[i]};"
                        f"padding: 10px 15px;"
                        f"border-radius: 8px;"
                        f"font-weight: bold;"
                        f"font-size: 18px;"
                        f"min-width: 100px;"
                        f"box-shadow: 2px 2px 5px #aaa;"
                        f"text-align: center;'>"
                        f"{podium_labels[i]}<br>{nomes}<br>{votos} voto(s)"
                        "</div></div>"
                    )

                podium_html += "</div>"
                return podium_html

            st.markdown(
                gerar_html_podio(
                    df_votos["Craque"], "Craque da Chopp's League (Top 3)", "üèÜ"
                ),
                unsafe_allow_html=True,
            )
            st.markdown(
                gerar_html_podio(
                    df_votos["Pereba"], "Pereba da Chopp's League (Top 3)", "üê¢"
                ),
                unsafe_allow_html=True,
            )
            st.markdown(
                gerar_html_podio(
                    df_votos["Goleiro"], "Melhor Goleiro da Rodada (Top 3)", "üß§"
                ),
                unsafe_allow_html=True,
            )

    # Midias
    def tela_galeria_momentos():
        st.title("üì∏ Galeria de Momentos da Chopp's League")

        st.markdown(
            "Veja os melhores registros da Chopp's League: gols, resenhas e lembran√ßas üçª‚öΩ"
        )

        # --- T√ìPICOS DA GALERIA ---
        topicos = {
            "üèñÔ∏è Confraterniza√ß√µes": "midia/confraternizacoes",
            "üî• Jogadas Bonitas": "midia/jogadas_bonitas",
            "üòÇ Lances Engra√ßados": "midia/lances_engracados",
            "ü•Ö Gols Incr√≠veis": "midia/gols_incriveis",
            "üéâ Bastidores & Zoa√ß√µes": "midia/bastidores",
        }

        for titulo, pasta in topicos.items():
            st.markdown(f"### {titulo}")

            if not os.path.exists(pasta):
                st.info("Nenhum conte√∫do dispon√≠vel ainda.")
                continue

            arquivos = sorted(os.listdir(pasta))
            imagens = [
                a for a in arquivos if a.lower().endswith((".png", ".jpg", ".jpeg"))
            ]
            videos = [
                a for a in arquivos if a.lower().endswith((".mp4", ".mov", ".webm"))
            ]

            col1, col2 = st.columns(2)

            with col1:
                for img in imagens:
                    st.image(
                        os.path.join(pasta, img), caption=img, use_container_width=True
                    )

            with col2:
                for vid in videos:
                    st.video(os.path.join(pasta, vid))

            st.markdown("---")

    # F√≥rum
    def tela_forum():
        FILE_FORUM = "forum.csv"

        # Cria o arquivo se n√£o existir
        if not os.path.exists(FILE_FORUM):
            df_forum = pd.DataFrame(columns=["Autor", "Mensagem", "DataHora"])
            df_forum.to_csv(FILE_FORUM, index=False)

        # Carrega os dados existentes
        df_forum = pd.read_csv(FILE_FORUM)

        st.title("üí¨ F√≥rum")
        nome = st.session_state.get("nome", "An√¥nimo")

        # --- Campo para novo coment√°rio ---
        with st.form("form_comentario"):
            st.markdown(f"Escreva algo, **{nome}**:")
            mensagem = st.text_area(
                "Mensagem",
                placeholder="Digite seu coment√°rio aqui...",
                max_chars=500,
                label_visibility="collapsed",
            )
            enviar = st.form_submit_button("Enviar")

            if enviar:
                if mensagem.strip() == "":
                    st.warning("O coment√°rio n√£o pode estar vazio.")
                else:
                    novo = pd.DataFrame(
                        [
                            {
                                "Autor": nome,
                                "Mensagem": mensagem.strip(),
                                "DataHora": datetime.now().strftime(
                                    "%Y-%m-%d %H:%M:%S"
                                ),
                            }
                        ]
                    )
                    df_forum = pd.concat([df_forum, novo], ignore_index=True)
                    df_forum.to_csv(FILE_FORUM, index=False)
                    st.success("Coment√°rio publicado!")

        # --- Exibe coment√°rios existentes (mais recentes primeiro) ---
        st.markdown("### üóÇ Coment√°rios recentes")

        if df_forum.empty:
            st.info("Ainda n√£o h√° coment√°rios. Seja o primeiro a escrever! ü§ô")
        else:
            # Ordena por data decrescente
            df_forum["DataHora"] = pd.to_datetime(df_forum["DataHora"])
            df_forum = df_forum.sort_values(by="DataHora", ascending=False)

            for _, row in df_forum.iterrows():
                st.markdown(
                    f"""
                <div style='border:1px solid #ddd; border-radius:8px; padding:10px; margin-bottom:10px; background-color: #f9f9f9;'>
                    <strong>{row['Autor']}</strong> <span style='color:gray; font-size:12px;'>({row['DataHora'].strftime('%d/%m/%Y %H:%M')})</span>
                    <div style='margin-top:5px;'>{row['Mensagem']}</div>
                </div>
                """,
                    unsafe_allow_html=True,
                )

    # Tela de mensagem a gest√£o
    def tela_comunicado():
        st.title("üì£ Comunicado √† Gest√£o")

        nome = st.session_state.get("nome", "usu√°rio")
        telefone = st.session_state.get("telefone", "n√£o informado")
        email = st.session_state.get("email", "n√£o informado")

        st.markdown(
            f"""
            <p>Use o espa√ßo abaixo para enviar um comunicado √† organiza√ß√£o. 
            Assim que voc√™ clicar em <strong>Enviar via WhatsApp</strong>, a mensagem ser√° aberta no aplicativo do WhatsApp com seus dados preenchidos.</p>
        """,
            unsafe_allow_html=True,
        )

        mensagem = st.text_area(
            "‚úâÔ∏è Sua mensagem",
            height=150,
            placeholder="Digite aqui sua sugest√£o, reclama√ß√£o ou comunicado...",
        )

        if st.button("üì§ Enviar via WhatsApp"):
            if not mensagem.strip():
                st.warning("Digite uma mensagem antes de enviar.")
            else:
                numero_destino = "5531991159656"  # Brasil + DDD + n√∫mero
                texto = f"""Ol√°, aqui √© {nome}!

    Telefone: {telefone}
    Email: {email}

    üì£ Comunicado:
    {mensagem}
    """
                texto_codificado = urllib.parse.quote(texto)
                link = f"https://wa.me/{numero_destino}?text={texto_codificado}"
                st.success(
                    "Clique no bot√£o abaixo para abrir o WhatsApp com sua mensagem:"
                )
                st.markdown(f"[üì≤ Abrir WhatsApp]({link})", unsafe_allow_html=True)

    # Tela das Regras
    def tela_regras():
        st.markdown(
            "<h1 style='font-size:23px;'>üõë Regras Oficiais</h1>",
            unsafe_allow_html=True,
        )
        st.markdown("---")

        def subtitulo(txt):
            st.markdown(
                f'<h3 style="font-size:20px; margin-top: 1em;">{txt}</h3>',
                unsafe_allow_html=True,
            )

        subtitulo("‚úÖ 1. Confirma√ß√£o de Presen√ßa")
        st.markdown(
            """
        - Os jogadores devem confirmar presen√ßa **at√© as 22h de quarta-feira**.
        - Quem n√£o confirmar no prazo **n√£o poder√° jogar**.
        """
        )

        subtitulo("‚åõ 2. Tempo de Jogo e Rod√≠zio")
        st.markdown(
            """
        - Cada partida ter√° dura√ß√£o de **7 minutos ou at√© 2 gols**, o que ocorrer primeiro.
        - O **time que entra joga pelo empate**:
            - Se empatar, o **time vencedor da partida anterior sai**.
            - Se perder, o **time que entrou sai normalmente**.
        """
        )

        subtitulo("üëï 3. Uniforme Obrigat√≥rio")
        st.markdown(
            """
        - √â obrigat√≥rio comparecer com o uniforme padr√£o completo:
            - Camisa do **Borussia Dortmund**
            - Camisa da **Inter de Mil√£o**
            - **Cal√ß√£o preto**
            - **Mei√£o preto**
        - Jogadores sem o uniforme completo **n√£o poder√£o jogar**.
        """
        )

        subtitulo("üí∞ 4. Mensalidade e Pagamento")
        st.markdown(
            """
        - A mensalidade deve ser paga **at√© o dia 10 de cada m√™s**.
        - **Jogadores inadimplentes n√£o poder√£o jogar at√© quitar sua d√≠vida**.
        - **Goleiros s√£o isentos da mensalidade**, mas devem pagar **o uniforme**.
        """
        )

        subtitulo("üí∏ 5. Contribui√ß√£o para o Caixa")
        st.markdown(
            """
        - Todos os jogadores, incluindo goleiros, devem contribuir com **R$20,00 adicionais**.
        - O valor ser√° utilizado exclusivamente para:
            - **Materiais esportivos** (bolas, bomba de encher bola, etc.)
            - **Itens m√©dicos** (Gelol, faixa, esparadrapo, gelo, etc.)
            - **√Ågua**
            - **Confraterniza√ß√µes** ou outras necessidades da Chopp's League
        """
        )

        subtitulo("üìÖ 6. Comprometimento")
        st.markdown(
            """
        - Ao confirmar presen√ßa, o jogador assume o compromisso de comparecer.
        - **Faltas n√£o justificadas** podem resultar em **suspens√£o da pr√≥xima rodada**.
        """
        )

        subtitulo("‚ö†Ô∏è 7. Comportamento")
        st.markdown(
            """
        - Discuss√µes, brigas ou qualquer tipo de agressividade resultam em **suspens√£o autom√°tica da pr√≥xima rodada**.
        - Em caso de reincid√™ncia, o jogador poder√° ser **banido temporariamente ou definitivamente**, conforme decis√£o da gest√£o.
        """
        )

        subtitulo("üß§ 8. Goleiros e Rod√≠zio")
        st.markdown(
            """
        - Na aus√™ncia de goleiro fixo, haver√° **rod√≠zio entre os jogadores de linha** para cobrir o gol.
        """
        )

        subtitulo("üîê 9. Responsabilidade")
        st.markdown(
            """
        - Comprometimento com **pagamentos, presen√ßa e respeito** √© essencial para manter a organiza√ß√£o.
        - **Quem n√£o estiver em dia com os compromissos n√£o joga.**
        """
        )

        subtitulo("‚≠ê 10. Avalia√ß√£o P√≥s-Jogo: P√©reba e Craque")
        st.markdown(
            """
        - Ap√≥s cada partida, ser√° feita uma vota√ß√£o divertida para eleger:
            - **‚≠ê Craque**: jogador com a melhor performance.
            - **üê¢ P√©reba**: jogador com a pior performance da rodada.
            - **üß§ Pared√£o:** goleiro com a melhor atua√ß√£o defensiva da rodada.
        - A vota√ß√£o √© **exclusiva para quem confirmou presen√ßa e jogou na partida do dia**.
        - Somente jogadores presentes poder√£o votar.
        - A finalidade √© **uma brincadeira para animar o grupo e fortalecer o esp√≠rito da Chopp's League**.
        - Os resultados ser√£o divulgados para descontra√ß√£o na tela **'Avalia√ß√£o p√≥s-jogo'**.
        """
        )

    # Inicializa√ß√£o de sess√£o
    if "pagina_atual" not in st.session_state:
        st.session_state.pagina_atual = "üè† Tela Principal"

    if "nome" not in st.session_state:
        st.session_state.nome = "usu√°rio"

    # Dados fict√≠cios para partidas
    if "partidas" not in st.session_state:
        st.session_state.partidas = pd.DataFrame(
            columns=[
                "Data",
                "N√∫mero da Partida",
                "Placar Borussia",
                "Gols Borussia",
                "Assist√™ncias Borussia",
                "Placar Inter",
                "Gols Inter",
                "Assist√™ncias Inter",
            ]
        )

    partidas = st.session_state.partidas

    # Roteador de p√°ginas
    if st.session_state.pagina_atual == "üè† Tela Principal":
        tela_principal(partidas, jogadores)
    elif st.session_state.pagina_atual == "üìä Registrar Partida":
        partidas = registrar_partidas(partidas)
    elif st.session_state.pagina_atual == "üëü Estat√≠sticas dos Jogadores":
        jogadores = tela_jogadores(jogadores)
    elif st.session_state.pagina_atual == "üé≤ Sorteio de Times":
        tela_sorteio()
    elif st.session_state.pagina_atual == "‚úÖ Confirmar Presen√ßa/Aus√™ncia":
        tela_presenca_login()
    elif st.session_state.pagina_atual == "üèÖ Avalia√ß√£o P√≥s-Jogo":
        tela_avaliacao_pos_jogo()
    elif st.session_state.pagina_atual == "üì∏ Galeria de Momentos":
        tela_galeria_momentos()
    elif st.session_state.pagina_atual == "üí¨ F√≥rum":
        tela_forum()
    elif st.session_state.pagina_atual == "üì£ Comunicado √† Gest√£o":
        tela_comunicado()
    elif st.session_state.pagina_atual == "üìú Regras Chopp's League":
        tela_regras()
